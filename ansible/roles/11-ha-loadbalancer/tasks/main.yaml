---
- name: "Section 0: Dynamically discover the Host-only network interface"
  block:
    - name: "Step 1. Find the NAT interface to exclude"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          ip -o -4 addr show | grep 'inet {{ nat_subnet_prefix }}.' | awk '{print $2}'
        executable: /bin/bash
      register: nat_iface_result
      changed_when: false

    - name: "Step 2. Find the Host-only interface by excluding NAT and loopback"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          ip -o link show | awk -F': ' '{print $2}' | grep -v -e '^lo$' -e '^{{ nat_iface_result.stdout }}$'
        executable: /bin/bash
      register: hostonly_iface_result
      changed_when: false

    - name: "Step 3. Set k8s_ha_interface fact for use in templates"
      ansible.builtin.set_fact:
        k8s_ha_interface: "{{ hostonly_iface_result.stdout }}"
      when: hostonly_iface_result.stdout | length > 0

    - name: "Step 4. Fail if Host-only interface could not be determined"
      ansible.builtin.fail:
        msg: "Could not dynamically determine the Host-Only network interface."
      when: k8s_ha_interface is not defined or k8s_ha_interface | length == 0

- name: "Section A: Install HAProxy and Keepalived packages"
  block:
    - name: "Step 1. Allow binding to non-local IP addresses"
      ansible.posix.sysctl:
        name: net.ipv4.ip_nonlocal_bind
        value: "1"
        state: present
        reload: true

    - name: "Step 2. Install Necessary Packages"
      ansible.builtin.apt:
        name:
          - keepalived
          - haproxy
          - rsyslog
          - etcd-client
        state: present
        update_cache: true

- name: "Section B: Configure Keepalived"
  block:
    - name: "Step 1. Ensure keepalived_script user exists for security context"
      ansible.builtin.user:
        name: keepalived_script
        system: true
        shell: /sbin/nologin
        state: present

    - name: "Step 2. Configure Keepalived from template"
      ansible.builtin.template:
        src: keepalived.conf.j2  # This template uses k8s_ha_virtual_ip etc.
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: "0644"
      notify: Restart keepalived  # Notify handler to restart the service on change

    - name: "Step 3. Verify Keepalived configuration syntax"
      ansible.builtin.command: keepalived --config-test
      changed_when: false

- name: "Section C: Configure HAProxy"
  block:
    - name: "Step 1. Configure HAProxy from template"
      ansible.builtin.template:
        src: haproxy.cfg.j2  # This template loops through groups['master']
        dest: /etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: "0644"
      notify: Restart haproxy  # Notify handler to restart the service on change

    - name: "Step 2. Verify HAProxy configuration syntax"
      ansible.builtin.command: haproxy -c -f /etc/haproxy/haproxy.cfg
      changed_when: false

- name: "Section D: Configure Logging"
  block:
    - name: "Step 1. Ensure rsyslog is configured for keepalived"
      ansible.builtin.lineinfile:
        path: /etc/rsyslog.conf
        line: "local0.* /var/log/keepalived.log"
        create: true
        mode: "0644"
      notify: Restart rsyslog

    - name: "Step 2. Force handlers to run now for logging to take effect"
      # Meta task to ensure rsyslog is restarted before other services
      ansible.builtin.meta: flush_handlers

- name: "Section E: Ensure HA services are running"
  block:
    - name: "Ensure Keepalived and HAProxy services are enabled and started"
      # This final task ensures that regardless of changes, the services are running
      # before this role completes, making the VIP and Load Balancer available
      # for the next Play.
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
        daemon_reload: true  # Reload systemd if config has changed
      loop:
        - keepalived
        - haproxy
