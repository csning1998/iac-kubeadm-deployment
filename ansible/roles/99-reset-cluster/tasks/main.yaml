---
- name: "Pre-run: Check for Kubernetes config files"
  ansible.builtin.stat:
    path: "{{ item }}"
  register: k8s_config_files
  loop:
    - /etc/kubernetes/admin.conf
    - /etc/kubernetes/kubelet.conf

- name: "Section A: Gracefully reset Kubernetes state"
  block:
    - name: "Step 1. Run kubeadm reset"
      ansible.builtin.command: kubeadm reset -f
      register: kubeadm_reset_result
      changed_when: "'cleaned up' in kubeadm_reset_result.stdout"
      when: k8s_config_files.results | map(attribute='stat.exists') | select | list | length > 0

    - name: "Step 2. Stop and disable the kubelet service"
      ansible.builtin.systemd:
        name: kubelet
        state: stopped
        enabled: false
      register: systemd_kubelet_result
      failed_when:
        - systemd_kubelet_result.failed
        - "'Could not find the requested service' not in systemd_kubelet_result.msg"
        - "'not loaded' not in systemd_kubelet_result.msg"

- name: "Section B: Remove running Kubernetes containers"
  block:
    - name: "Step 1. Get list of all running containers"
      ansible.builtin.command: crictl --runtime-endpoint unix:///var/run/crio/crio.sock ps -q
      register: crictl_ps_result
      changed_when: false
      failed_when: false

    - name: "Step 2. Stop all running containers"
      ansible.builtin.command: crictl --runtime-endpoint unix:///var/run/crio/crio.sock stop {{ item }}
      loop: "{{ crictl_ps_result.stdout_lines }}"
      when: crictl_ps_result.stdout | length > 0
      changed_when: true
      failed_when: false

    - name: "Step 3. Remove all containers"
      ansible.builtin.command: crictl --runtime-endpoint unix:///var/run/crio/crio.sock rm -f {{ item }}
      loop: "{{ crictl_ps_result.stdout_lines }}"
      when: crictl_ps_result.stdout | length > 0
      changed_when: true
      failed_when: false

    - name: "Step 4. Restart CRI-O runtime to ensure clean state"
      ansible.builtin.systemd:
        name: crio
        state: restarted

- name: "Section C: Uninstall HA components (Master nodes only)"
  when: inventory_hostname in groups['master']
  block:
    - name: "Step 1. Stop and disable HA services"
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop:
        - haproxy
        - keepalived
      register: systemd_ha_result
      failed_when:
        - systemd_ha_result.failed
        - "'Could not find the requested service' not in systemd_ha_result.msg"
        - "'not loaded' not in systemd_ha_result.msg"

    - name: "Step 2. Uninstall HA packages"
      ansible.builtin.apt:
        name:
          - haproxy
          - keepalived
        state: absent
        purge: true
        autoremove: true

- name: "Section D: Clean up all configuration files and directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/kubernetes
    - /var/lib/kubelet
    - /var/lib/etcd
    - /etc/cni/net.d
    - "/home/{{ ansible_ssh_user | default('ubuntu') }}/.kube"
    - "/root/.kube"
    - /etc/haproxy/haproxy.cfg
    - /etc/keepalived/keepalived.conf
    - /etc/crio/crio.conf.d/02-cgroup-manager.conf

- name: "Final check: Ensure specific processes are terminated"
  ansible.builtin.command: "pkill -9 {{ item }}"
  loop:
    - haproxy
    - kubelet
  changed_when: false
  failed_when: false
