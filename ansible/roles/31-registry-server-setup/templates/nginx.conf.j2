upstream local_registry {
    server 127.0.0.1:5000;
}

map $upstream_name $upstream_host {
    default       "registry-1.docker.io";
    "docker.io"   "registry-1.docker.io";
    "quay.io"     "quay.io";
    "gcr.io"      "gcr.io";
    "k8s.gcr.io"  "k8s.gcr.io";
    "registry.k8s.io" "registry.k8s.io";
}

server {
    listen {{ nginx_listen_ip }}:5000;
    server_name registry.example.com;

    client_max_body_size 0;
    chunked_transfer_encoding on;

    location /v2/ {
        # --- The Correct Loop-Breaking Logic V2 ---

        # 1. First, try to proxy to the local cache.
        proxy_pass http://local_registry;
        proxy_intercept_errors on;
        
        # 2. If the local cache returns 404 (Not Found), it means a cache miss.
        #    We then jump to the @fetch_from_upstream location to fetch from the public internet.
        error_page 404 = @fetch_from_upstream;

        # Set headers for the initial proxy_pass to the local registry
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 900;
    }

    # This named location is ONLY triggered when the local_registry returns a 404
    location @fetch_from_upstream {
        resolver 8.8.8.8 1.1.1.1 valid=300s;
        resolver_timeout 10s;

        # The original request URI is available in $request_uri
        # Example: /v2/registry.k8s.io/coredns/coredns/manifests/v1.11.3

        # 3. We need to parse the request URI to determine the correct upstream host.
        # The CRI-O mirror config rewrites "registry.k8s.io/coredns/coredns" to "your-registry/registry.k8s.io/coredns/coredns".
        # So the request_uri at Nginx will contain the original hostname.

        set $upstream_name "docker.io"; # Default to Docker Hub

        if ($request_uri ~ "^/v2/([a-zA-Z0-9.-]+)/") {
            set $upstream_name $1;
        }
        
        # We need to construct the new URI for the public registry
        # by removing our registry prefix if it exists.
        # However, with CRI-O mirror, the prefix is handled by the client.
        # The request URI should be correct as is.

        # 4. Proxy the request to the correct public registry
        proxy_pass https://$upstream_host$request_uri;
        
        proxy_set_header Host $upstream_host;
        proxy_set_header Authorization ""; # Don't pass auth to public registries
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_ssl_server_name on;
        proxy_ssl_name $upstream_host;
    }
}