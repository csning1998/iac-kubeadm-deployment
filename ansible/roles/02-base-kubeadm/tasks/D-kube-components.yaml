---
- name: Section D. Install Kubernetes components
  block:
    - name: "Step 1a. Download Kubernetes GPG key"
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        dest: /tmp/kubernetes-apt-keyring.asc
        mode: "0644"

    - name: "Step 1b. Dearmor Kubernetes GPG key"
      ansible.builtin.command:
        cmd: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.asc"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: gpg_dearmor_k8s_result
      changed_when: gpg_dearmor_k8s_result.rc == 0 and 'overwrite' not in gpg_dearmor_k8s_result.stderr

    - name: "Step 2. Add Kubernetes apt repository"
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
        state: present
        filename: kubernetes
        update_cache: true

    - name: "Step 3. Install kubeadm, kubelet, kubectl"
      ansible.builtin.apt:
        name:
          - kubelet=1.32.0-1.1
          - kubeadm=1.32.0-1.1
          - kubectl=1.32.0-1.1
        state: present

    - name: "Step 4. Hold Kubernetes package versions"
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: "Step 5. Enable the kubelet service"
      ansible.builtin.systemd:
        name: kubelet
        enabled: true

    - name: "Step 6. Clean up temporary files"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/crio.key
        - /tmp/kubernetes-apt-keyring.asc

    # - name: "Step 6. Pre-pull container images for control plane"
    #   ansible.builtin.command: kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock
    #   changed_when: true
